wget -- download the software
    1) need to external software . then we can use wget and download the software after tar and untar.
    2) already softwares in yum repository. yum install java or dotnet.



=====================================================================================================
                       Git commands 
=====================================================================================================
 SDLC : Software development life cycle
 
 plan->design->build->test->deployment->release->monitoring

 plan : gather requirement
 defining : what languages we are using .
 Design : start development (devops start)
        
           if u want start development where we need to write code and where maintined
   old days : they can write code in local system and keep in shared folders . for the reason sometimes delay or getting issue.

   now days : version control system (VCS):
               VCS ntg but it will keep one track the all changes .
             1) centraliazed version control system (sub version )
                 center server- where u need to write code ,once code written u can keep maintain in server.
                  that is called commit.
    incase CVCS server getting traced , we may loss the data. for the reason we use.

             2)Distributed version control system (DVCS) - > Ex: git 
      Here every developer will get one copy of ur repository (centralized location of the server or where ur maintaning the code)
        repository (folder) -> where code exists.

Git : git is distributed versio control system to manage ur source code. this is ntg but source code management tool.
     
    --> How maintain the source code : source code manegement will maintain the code.

    --> go to root user the check

    --> first check install git 

          git --version (here showing installed or not) 

    --> install git :
                      yum install git
                      git version 2.47.1

    --> yum update (sometimes we can use always . for suppose is ther any updates automatically updated)

    --> create repsository : 
        -------------------- 
           git init reposirotyname 

            Ex:  git init git_repo

             #)how to find repository or directory
               ls -lrta
                 .git -->directory name with end 

      --> now need to work in Repository.
          first create file in repostiroy with some data.
         once created file , u have add file in staging area.

         $ git add : 
                     Moves changes from the working directory to the staging area.

         $ give status 

         $ git add filename 

    ---> once add file in repository , then we can commit.

         $ git commit -m  "mention comments"

       create repository (folder) -->add file in repository-->commit the file 

       Note : Incase sometimes need to modified the file , then again need to add file in staging area and do again commit.

              Once again added the file , after u realized those changes don't want .. for that time we can use command
             
          $ git restore --staged filename 

          $ git checkout filename 

          $ git log (track the entire commit status and id displayed)

       Note : For suppose once commited the file , but after need to revert the file . we need to use command

          $ git revert --(before u have to take commit id : git log --oneline) 

          $ git revert commit id (delete revert line and give comments why revert)
   
    ---> For suppose know the commit id , but inside commit id what happend or who did) 

          $ git show commitid  (showing all changes lines or added)



    Git 2nd class 
    ==============

        For suppose ur working middle of the file ,  but get work from others immediately.
          need to do others work, we can't leave ur file right. we can add file but don't do commit.

         $ git add filename

         $ git status

         Note : first test its working after we can commit. for the reason we can do stash.

         $ git stash
        
            do other work will be finished, add the staging area afetr commit.
             Once others completed , need to go ur work

         $ git stash apply

         after commited , need to changes commit messages then go to 

         $ git commit --amend
		 
     find which branch u in 
	     $ git branch 
		 
		brnach uses : If u create a duplicate copy of master brnach or main branch.
		
		Suppose if u get requirment do some modifications in file .
		
		First we can create new brnach (Own) , becuase incase if u working with fie in Master there will be gettign some issue.
		 for the reason do first in own branch , once code is ready then we can merge from own branch to master branch.
		 
		 $ git branch dev   ( to create a branch) 
		 
		 $ git branch 
		 
		 if u want to delete branch 
		  
		  $ git branch -d branch_name
		 
		Now u need to switch one branch to another branch
		 
		  $ git checkout branch_name
		  
		Once done modification in dev but those changes files need to come in master . 
		 1) first u can go target brnach
		 
		 then we can merge the files
		 $ git merge branch_name
		 
    ********* when you have to go for merge and rebase*************
	      if u want to changes with clean 
		  
		  $ git rebase branch_name
		  
		Suppose same file we can midfied with different branches , after we trying to merge those files it's got failed.
		by that time we can resolve that .
		
		1) open the file first and delete unwanted lines
		2) we can discuss with developers what data required and remainig lines we need to delete then commit.
		
   ---> git : local 
   ---> git hub : office use or online
   
    if u want clone in local machine.
	
	   come to local home in putty .
	   
	   $ git clone link 
	   
	  if u want delete file
	   $ git rm file_name
	   
	Note : whenever you cloned to the files , it will come under one name in Local -->Origin
	
	git push : it will push the local to github
	
	  $ git push
	   Username : prasadrsreddy
	   Password : token give 
	   
	   Token generate  : go github and open settings
	                                   devops settings
									   personal access tokens ->tokens (classic) --> generate tokens
	
	form local to online : git push 
	form online to loca  : git pull
	
     git push origin dev
	 
	 merge main to dev in github:
	 ==============================
	 
	 
	 
Scope : 
=======
compile 
provided
runtime
test
system
import

maven repos:
=======
local
remote 
central or online repository

Jar files
===========
<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
</dependency>
<dependency>
      <groupId>projectA</groupId>
      <artifactId></artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
</dependency>

war files
=============
<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
</dependency>





	 
	
	
	
	   
	 
		  
		
		  
		

   



    
   
                   

          

   
    



                    
